from openai import OpenAI  # Import the client-based OpenAI
import os
from google.oauth2 import service_account
from googleapiclient.discovery import build
import pdfplumber
from tqdm import tqdm
import io
from dotenv import load_dotenv
import re

# Load the .env file
load_dotenv()

# Fetch the OpenAI API key
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY environment variable is not set!")

# Initialize the OpenAI client with the API key
client = OpenAI(api_key=OPENAI_API_KEY)

# Configuration Section
SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
SERVICE_ACCOUNT_FILE = 'service_account.json'  # Path to Google Cloud service account credentials
SHEET_ID = '1az0RHQaGLF5yusr8-L-OwpLkgmtPyx76ncAxf2Bl_1g'  # Google Sheet ID to save results
GOOGLE_DRIVE_FOLDER_ID = '19gAJtKoRIa70pstI2hiTL6XZLzbwpnJL'  # Google Drive folder with papers


# Authenticate Google services
def authenticate_google_services():
    credentials = service_account.Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE, scopes=SCOPES
    )
    drive_service = build('drive', 'v3', credentials=credentials)
    sheets_service = build('sheets', 'v4', credentials=credentials)
    return drive_service, sheets_service


# Extract text and tables from a PDF file
def extract_text_and_tables_from_pdf(file_stream):
    text = ""

    with pdfplumber.open(io.BytesIO(file_stream)) as pdf:
        for page in pdf.pages:
            text += page.extract_text() or ""

    return text


def evaluate_pdf_with_gpt(text):
    try:
        # Prepare your prompt for GPT evaluation
        prompt = (
            f"You are conducting a systematic literature review. Based on the following document text, "
            f"please evaluate the paper on the following Quality Assessment (QA) criteria.\n"
            f"Provide answers in the following format for each question:\n"
            f"Answer: Yes/No/Partially\n"
            f"Justification: Brief justification here.\n"
            f"Reference: Relevant reference from the paper.\n\n"
            f"Document Text:\n{text[:3000]}\n\n"
            "Please answer the following questions:\n"
            "1. Is the paper related to the context of the topic?\n"
            "2. Does the paper propose a clear framework, tool, or methodology?\n"
            "3. Is there a clear explanation of its contribution to the field?\n"
            "4. Does the paper discuss limitations and reliability of results?\n"
            "5. Is the methodology described in sufficient detail?\n"
            "Ensure your responses are concise and formatted exactly as specified."
        )

        # Call the OpenAI API using the client object
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "user", "content": prompt}
            ],
            max_tokens=1500,
            temperature=0.7
        )

        # Extract the assistant's reply
        evaluation = response.choices[0].message.content.strip()

        # Debug: Print the GPT response
        print(f"GPT Response:\n{evaluation}\n")

        return evaluation
    except Exception as e:
        print(f"Error during GPT evaluation: {e}")
        return "Error in evaluation"


def parse_gpt_response(evaluation):
    pattern = r"Answer:\s*(Yes|No|Partially)\s*Justification:\s*(.*?)\s*Reference:\s*(.*?)\s*(?=Answer:|$)"
    matches = re.findall(pattern, evaluation, re.IGNORECASE | re.DOTALL)

    responses = []
    for match in matches[:5]:  # Only expecting 5 questions
        answer = match[0].strip()
        justification = match[1].strip()
        reference = match[2].strip()
        responses.append([answer, justification, reference])

    # Handle missing responses
    while len(responses) < 5:
        responses.append(["", "", ""])

    return responses


# Write evaluation data to Google Sheets
def write_data_to_google_sheets(sheets_service, sheet_id, data, is_first_row=False):
    sheet = sheets_service.spreadsheets()

    # If this is the first row, insert the headers
    if is_first_row:
        headers = [
            "Paper Title", "Is the paper related to the context of the topic?", "Justification",
            "References", "Does the paper propose a clear framework?", "Justification",
            "References", "Is there a clear explanation of its contribution?",
            "Justification", "References", "Does the paper discuss limitations?",
            "Justification", "References", "Is the methodology described in detail?",
            "Justification", "References"
        ]
        sheet.values().update(
            spreadsheetId=sheet_id,
            range="Sheet1!A1",
            valueInputOption="RAW",
            body={"values": [headers]}
        ).execute()

    request = sheet.values().append(
        spreadsheetId=sheet_id,
        range="Sheet1",
        valueInputOption="RAW",
        insertDataOption="INSERT_ROWS",
        body={"values": data},
    )
    response = request.execute()
    return response


# Process PDFs from Google Drive and collect QA assessments
def process_pdfs_from_drive(drive_service, sheets_service, folder_id):
    results = drive_service.files().list(
        q=f"'{folder_id}' in parents and mimeType='application/pdf'",
        fields="files(id, name)"
    ).execute()
    files = results.get('files', [])

    if not files:
        print("No PDF files found in the specified Google Drive folder.")
        return

    is_first_row = True  # Track if it's the first row to add headers
    for file in tqdm(files, desc='Processing PDFs'):
        file_id = file['id']
        file_name = file['name'].replace('.pdf', '')  # Remove the .pdf extension from the title

        # Download file content from Google Drive
        request = drive_service.files().get_media(fileId=file_id)
        file_stream = io.BytesIO(request.execute())

        # Extract text from the PDF
        text = extract_text_and_tables_from_pdf(file_stream.getvalue())

        # Evaluate the extracted data with OpenAI GPT
        evaluation = evaluate_pdf_with_gpt(text)

        # Parse the GPT evaluation into columns
        responses = parse_gpt_response(evaluation)

        # Map parsed responses to the expected column structure
        paper_evaluation = [
            file_name,  # Paper title
            responses[0][0], responses[0][1], responses[0][2],  # Question 1
            responses[1][0], responses[1][1], responses[1][2],  # Question 2
            responses[2][0], responses[2][1], responses[2][2],  # Question 3
            responses[3][0], responses[3][1], responses[3][2],  # Question 4
            responses[4][0], responses[4][1], responses[4][2],  # Question 5
        ]

        # Now write the structured evaluation to Google Sheets
        write_data_to_google_sheets(sheets_service, SHEET_ID, [paper_evaluation], is_first_row=is_first_row)
        is_first_row = False  # Only add headers once


# Main function to run the script
def main():
    drive_service, sheets_service = authenticate_google_services()
    process_pdfs_from_drive(drive_service, sheets_service, GOOGLE_DRIVE_FOLDER_ID)


if __name__ == "__main__":
    main()
