import os
import openai
import requests
import io
from google.oauth2 import service_account
from googleapiclient.discovery import build
from PyPDF2 import PdfReader
from tqdm import tqdm

# Configuration Section
SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
SERVICE_ACCOUNT_FILE = 'service_account.json'  # Path to Google Cloud service account credentials
SHEET_ID = 'YOUR_GOOGLE_SHEET_ID'  # Google Sheet ID to save results
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')  # OpenAI API key for GPT-4
GOOGLE_DRIVE_FOLDER_ID = 'YOUR_GOOGLE_DRIVE_FOLDER_ID'  # Google Drive folder with papers

# Authenticate Google services
def authenticate_google_services():
    credentials = service_account.Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE, scopes=SCOPES
    )
    drive_service = build('drive', 'v3', credentials=credentials)
    sheets_service = build('sheets', 'v4', credentials=credentials)
    return drive_service, sheets_service

# Extract text from PDF files (limited to the first few pages)
def extract_text_from_pdf(file_stream, max_pages=5):
    reader = PdfReader(file_stream)
    text = ""
    for i in range(min(max_pages, len(reader.pages))):
        text += reader.pages[i].extract_text()
    return text

# Use GPT-4 to evaluate the text using predefined SLR criteria
def evaluate_pdf_with_gpt(text):
    openai.api_key = OPENAI_API_KEY
    prompt = (
        "You are conducting a systematic literature review in social sciences. Based on the following text, "
        "please evaluate the paper on the following Quality Assessment (QA) criteria:\n"
        "1. Is the paper related to the context of the topic? (yes/no/partially)\n"
        "2. Does the paper propose a clear framework, tool, or methodology? (yes/no/partially)\n"
        "3. Is there a clear explanation of its contribution to the field? (yes/no/partially)\n"
        "4. Does the paper discuss limitations and reliability of results? (yes/no/partially)\n"
        "5. Is the methodology described in sufficient detail? (yes/no/partially)\n"
        "For each criterion, provide a brief justification from the text.\n\n"
        f"Text:\n{text}\n\n"
        "Provide your evaluation in bullet points, specifying yes/no/partially and justifications."
    )
    response = openai.Completion.create(
        engine="gpt-4",
        prompt=prompt,
        max_tokens=500
    )
    return response.choices[0].text.strip()

# Write evaluation data to Google Sheets
def write_data_to_google_sheets(sheets_service, sheet_id, data):
    sheet = sheets_service.spreadsheets()
    request = sheet.values().append(
        spreadsheetId=sheet_id,
        range="Sheet1",
        valueInputOption="RAW",
        insertDataOption="INSERT_ROWS",
        body={"values": data},
    )
    response = request.execute()
    return response

# Process PDFs from Google Drive and collect QA assessments
def process_pdfs_from_drive(drive_service, sheets_service, folder_id):
    results = drive_service.files().list(
        q=f"'{folder_id}' in parents and mimeType='application/pdf'",
        fields="files(id, name)"
    ).execute()
    files = results.get('files', [])

    if not files:
        print("No PDF files found in the specified Google Drive folder.")
        return

    for file in tqdm(files, desc='Processing PDFs'):
        file_id = file['id']
        file_name = file['name']

        # Download file content
        request = drive_service.files().get_media(fileId=file_id)
        file_stream = io.BytesIO(request.execute())

        # Extract text and evaluate it
        text = extract_text_from_pdf(file_stream)
        if not text:
            print(f"Failed to extract text from {file_name}")
            continue

        evaluation = evaluate_pdf_with_gpt(text)

        # Organize data for Google Sheets
        evaluation_data = evaluation.split('\n')
        values = [file_name]
        for eval_item in evaluation_data:
            values.append(eval_item)

        # Write evaluation results to Google Sheet
        write_data_to_google_sheets(sheets_service, SHEET_ID, [values])

# Main function to run the script
def main():
    drive_service, sheets_service = authenticate_google_services()
    process_pdfs_from_drive(drive_service, sheets_service, GOOGLE_DRIVE_FOLDER_ID)

if __name__ == "__main__":
    main()
